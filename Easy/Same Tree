/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        stack<TreeNode*> st_p;
        stack<TreeNode*> st_q;
        
        if(p== NULL && q==NULL) return true;
        if(p) st_p.push(p);
        if(q) st_q.push(q);
        while(!st_p.empty() && !st_q.empty()){
            TreeNode* c_p = st_p.top();
            st_p.pop();
            TreeNode* c_q = st_q.top();
            st_q.pop();
            if(c_p->val != c_q->val) return false;
            
            if(c_p->left) st_p.push(c_p->left);
            if(c_q->left) st_q.push(c_q->left);
            if(st_p.size()!= st_q.size()) return false;
            
            if(c_p->right) st_p.push(c_p->right);
            if(c_q->right) st_q.push(c_q->right);
            if(st_p.size()!= st_q.size()) return false;
            
        }  
        // return true; gives WA for [], [0]
        return st_p.size()==st_q.size();
    }
};
